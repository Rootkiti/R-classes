knitr::opts_chunk$set(echo = TRUE)
# required package
library(haven)
install.packages("haven")
# required package
library(haven)
# import data
# data dimension
dir()
# required package
library(haven)
# import data
map <- read_sav("DHS2020/RWPR81FL.sav")
# data dimension
view(map)
View(map)
# required package
library(haven)
# import data
houseH <- read_sav("DHS2020/RWPR81FL.sav")
# data dimension
rm(map)
cls
clear
View(houseH)
# required package
library(haven)
# import data
houseH <- read_sav("DHS2020/RWPR81FL.sav")
map <- read_sas("DHS2020/RWPR81FL.MAP")
map <- read_sas("DHS2020/RWPR81FL.MAP")
# import data
houseH <- read_sav("DHS2020/RWPR81FL.sav")
map <- read.table("DHS2020/RWPR81FL.MAP")
map <- read.readLines("DHS2020/RWPR81FL.MAP")
map <- readLines("DHS2020/RWPR81FL.MAP")
map
# required package
library(haven)
# import data
houseH <- read_sav("DHS2020/RWPR81FL.sav")
map <- read.pam("DHS2020/RWPR81FL.MAP")
map <- read.map("DHS2020/RWPR81FL.MAP")
map <- read.sf("DHS2020/RWPR81FL.MAP")
map <- read.delim("DHS2020/RWPR81FL.MAP, delim = "\t", col_names = TRUE")
map <- read.delim("DHS2020/RWPR81FL.MAP, delim = "\\t", col_names = TRUE")
map <- read.delim("DHS2020/RWPR81FL.MAP, delim = '\t', col_names = TRUE")
map <- read.delim("DHS2020/RWPR81FL.MAP, delim = '\\t', col_names = TRUE")
map <- read.delim2("DHS2020/RWPR81FL.MAP, delim = '\\t', col_names = TRUE")
map <- read.delim("DHS2020/RWPR81FL.MAP, delim = '\\t', col_names = TRUE")
map <- read_delim("DHS2020/RWPR81FL.MAP, delim = '\\t', col_names = TRUE")
map <- read.delim("DHS2020/RWPR81FL.MAP, delim = '\\t', col_names = TRUE")
map <- read.delim("DHS2020/RWPR81FL.MAP, delim = '\t', col_names = TRUE, locale = locale(encoding = 'UTF-8')")
map <- read.delim("DHS2020/RWPR81FL.MAP, delim = '\t'")
map <- read.delim("DHS2020/RWPR81FL.MAP")
map <- read.delim("DHS2020/RWPR81FL.MAP")
View(map)
# data dimension
dim(map)
map <- read.table("DHS2020/RWPR81FL.MAP")
?read.table
map <- read.ftable("DHS2020/RWPR81FL.MAP")
map <- read.delim("DHS2020/RWPR81FL.MAP", delim = "\t")
map <- read.delim("DHS2020/RWPR81FL.MAP", delim = "\t")
# import data
houseH <- read_sav("DHS2020/RWPR81FL.sav")
# import data
houseH <- read_sav("DHS2020/RWPR81FL.sav")
map <- read.delim("DHS2020/RWPR81FL.MAP", delim = "\t")
map <- read_delim("DHS2020/RWPR81FL.MAP", delim = "\t")
map <- read.delim("DHS2020/RWPR81FL.MAP", delim = "\t")
?read.delim
map <- read.delim("DHS2020/RWPR81FL.MAP", sep = "\t")
View(map)
map <- read.delim("DHS2020/RWPR81FL.MAP", header=T)
map
map <- read.table("DHS2020/RWPR81FL.MAP", header=T)
?read.table
map <- read.table("DHS2020/RWPR81FL.MAP", header=F)
map <- read.table("DHS2020/RWPR81FL.MAP", header=T)
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=T)
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=T, sep = " ")
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=T, sep = "")
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=T, sep = "  ")
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=T, sep = " ")
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=T, sep = "  ")
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=T, sep = "")
?read.delim2
?read.delim2
?read.delim
?read.delim
# data dimension
```
?read
?read
?readChar
?read.delim
?read.delim
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=T, sep = "", as.is = T')
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=T, sep = "", as.is = T)
map
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=T, as.is = T)
View(map)
exit()
# data dimension
View(map)
# data dimension
(map)
# data dimension
print(map)
# data dimension
print(houseH)
# data dimension
(houseH)
# data dimension
head(houseH)
# required package
library(haven)
# import data
houseH <- read_sav("DHS2020/RWPR81FL.sav")
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=T, as.is = T)
?read.delim
# data dimension
head(houseH)
# required package
library(haven)
# import data
houseH <- read_sav("DHS2020/RWPR81FL.sav")
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=T)
?read.delim
# data dimension
head(houseH)
# data dimension
head(map)
# data dimension
(map)
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=T, sep = "")
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=T, sep = " ")
# data dimension
(map)
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=F, sep = " ")
# data dimension
(map)
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=F)
# data dimension
(map)
map <- readLines("DHS2020/RWPR81FL.MAP")
# data dimension
(map)
data <- read.table("DHS2020/RWPR81FL.MAP", header = TRUE, skip = 9)
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=F, skip = 9)
# data dimension
(map)
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=F, skip = 9, sep = "")
# data dimension
(map)
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=F, skip = 12, sep = "")
# data dimension
(map)
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=F, skip = 13, sep = "")
# data dimension
(map)
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=F, skip = 19, sep = "")
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=F, skip = 15, sep = "")
# data dimension
(map)
map <- read.delim2("DHS2020/RWPR81FL.MAP", header=F, skip = 15)
# data dimension
(map)
read.table(map)
(data.frame(map))
names(map)
map <- read.table("DHS2020/RWPR81FL.MAP", header=F, skip = 15)
map <- read.table("DHS2020/RWPR81FL.MAP", header=F, skip = 15, stringsAsFactors = FALSE)
map <- read.table("DHS2020/RWPR81FL.MAP", skip = 15, stringsAsFactors = FALSE)
map <- read.delim("DHS2020/RWPR81FL.MAP", header=F, skip = 15, stringsAsFactors = FALSE)
# data dimension
(map)
# data dimension
colnames(map) <- c("Item Name", "Item Label", "Start", "Len", "Type1", "Type2", "Occ", "Dec", "Char", "Fill")
map <- read.delim("DHS2020/RWPR81FL.MAP", header=F, skip = 15, stringsAsFactors = FALSE, sep = '')
map <- read.delim("DHS2020/RWPR81FL.MAP", header=F, skip = 15, stringsAsFactors = FALSE, sep = '')
map <- read.delim("DHS2020/RWPR81FL.MAP", header=F, skip = 15, stringsAsFactors = FALSE, sep = ' ')
knitr::opts_chunk$set(echo = TRUE)
# data dimension
dim(houseH)
# your code here
View(houseH)
str(houseH)
View(map)
summary(houseH)
# top 6 columns
head(houseH)
# last 6 rows
tail(houseH)
# column names
names(houseH)
# checking for missing values
is.na(houseH)
# counting missing values for columns
colSums(is.na(houseH))
summary(houseH)  # summary statistics for each column
str(houseH) # Understand the data structure (types, dimensions, column details).
# counting missing values for columns
colSums(is.na(houseH))
# counting missing values for columns
data.frame(colSums(is.na(houseH)))
# counting missing values for columns
data.frame("Sum of Missing values by colmuns" = colSums(is.na(houseH)))
summary(houseH)  # summary statistics for each column
data.frame(summary(houseH))  # summary statistics for each column
data.frame(str(houseH)) # Understand the data structure (types, dimensions, column details).
str(houseH) # Understand the data structure (types, dimensions, column details).
data.frame(summary(houseH), T)  # summary statistics for each column
data.frame(summary(houseH), t)  # summary statistics for each column
data.frame(summary(houseH))  # summary statistics for each column
# counting missing values for columns
data.frame("Sum of Missing values by colmuns" = colSums(is.na(houseH)))
# identifying columns type
sapply(dataset, class)
# identifying columns type
sapply(houseH, class)
# identifying columns type
data.frame(sapply(houseH, class))
sapply(houseH, class)
houseH$HV003
# identifying columns type
data.frame(sapply(houseH, class))
table(houseH$column)
# identifying columns type
data.frame(sapply(houseH, class))
# your code here
columns <- c("HV001", "HV009", "HV010", "HV011", "HV014", "SHDISTRICT", "HV024", "HV025", "HV040", "HV227", "HV228", "HV270", "HV105", "HV106", "HML3", "HML4", "HML7",
"HML10", "HML22", "HML32","HML33", "HML35")
houseH[,colmuns]
columns
# your code here
columns <- c("HV001", "HV009", "HV010", "HV011", "HV014", "SHDISTRICT", "HV024", "HV025", "HV040", "HV227", "HV228", "HV270", "HV105", "HV106", "HML3", "HML4", "HML7",
"HML10", "HML22", "HML32","HML33", "HML35")
houseH[,columns]
colSums(is.na(houseH[,columns]))
length(columns)
houseH[,columns]
houseH$HV105
new_names <- c("cluster_no","no_HH_member","no_elig_wom_HH","no_elig_men_HH","child_under_5years","district",
"province","locality","cluster_alt_M","mosquito_net_yes","child_under_5years_net_yes",
"socio-economic_status","HH_members_ages","education_level","net_observed",
"months_since_net_obtained","net_brand","ITN","antenatal","malaria_measures",
"malaria_blood_T_result","malaria_rapid_T_result")
length(new_names)
names(houseH) <- new_names
houseH
houseH
names(houseH)
# your code here
columns <- c("HV001", "HV009", "HV010", "HV011", "HV014", "SHDISTRICT", "HV024", "HV025", "HV040", "HV227", "HV228", "HV270", "HV105", "HV106", "HML3", "HML4", "HML7",
"HML10", "HML22", "HML32","HML33", "HML35")
df <-houseH[,columns]
knitr::opts_chunk$set(echo = TRUE)
options(warn = -1)
# required package
library(haven)
# import data
houseH <- read_sav("DHS2020/RWPR81FL.sav")
# data dimension
dim(houseH)
# your code here
View(houseH)
str(houseH) # Understand the data structure (types, dimensions, column details).
data.frame(summary(houseH))  # summary statistics for each column
# top 6 rows
head(houseH)
# last 6 rows
tail(houseH)
# column names
names(houseH)
# counting missing values for columns
data.frame("Sum of Missing values by colmuns" = colSums(is.na(houseH)))
# identifying columns type
data.frame(sapply(houseH, class))
# your code here
columns <- c("HV001", "HV009", "HV010", "HV011", "HV014", "SHDISTRICT", "HV024", "HV025", "HV040", "HV227", "HV228", "HV270", "HV105", "HV106", "HML3", "HML4", "HML7",
"HML10", "HML22", "HML32","HML33", "HML35")
df <- houseH[,columns]
df
new_names <- c("cluster_no","no_HH_member","no_elig_wom_HH","no_elig_men_HH","child_under_5years","district",
"province","locality","cluster_alt_M","mosquito_net_yes","child_under_5years_net_yes",
"socio-economic_status","HH_members_ages","education_level","net_observed",
"months_since_net_obtained","net_brand","ITN","antenatal","malaria_measures",
"malaria_blood_T_result","malaria_rapid_T_result")
length(new_names)
names(df) <- new_names
names(df)
df
unique(df$province)
dd <- unique(df$province)
dd
dd[2]
length(dd)
dim(dd)
dim(dd)
range(dd)
dd['lable']
dd
labelled::val_labels(dd)
as_factor(dd)
dd
df$province <- as_factor(df$province)
df$province
df
head(df,100)
View(df)
knitr::opts_chunk$set(echo = TRUE)
options(warn = -1)
# required package
library(haven)
# import data
houseH <- read_sav("DHS2020/RWPR81FL.sav")
# data dimension
dim(houseH)
# your code here
View(houseH)
str(houseH) # Understand the data structure (types, dimensions, column details).
data.frame(summary(houseH))  # summary statistics for each column
# top 6 rows
head(houseH)
# last 6 rows
tail(houseH)
# column names
names(houseH)
# counting missing values for columns
data.frame("Sum of Missing values by colmuns" = colSums(is.na(houseH)))
# identifying columns type
data.frame(sapply(houseH, class))
# your code here
columns <- c("HV001", "HV009", "HV010", "HV011", "HV014", "SHDISTRICT", "HV024", "HV025", "HV040", "HV227", "HV228", "HV270", "HV105", "HV106", "HML3", "HML4", "HML7",
"HML10", "HML22", "HML32","HML33", "HML35")
df <- houseH[,columns]
new_names <- c("cluster_no","no_HH_member","no_elig_wom_HH","no_elig_men_HH","child_under_5years","district",
"province","locality","cluster_alt_M","mosquito_net_yes","child_under_5years_net_yes",
"socio-economic_status","HH_members_ages","education_level","net_observed",
"months_since_net_obtained","net_brand","ITN","antenatal","malaria_measures",
"malaria_blood_T_result","malaria_rapid_T_result")
length(new_names)
names(df) <- new_names
head(df,100)
options(warn = -1)
# required package
library(haven)
# import data
houseH <- read_sav("DHS2020/RWPR81FL.sav")
# data dimension
dim(houseH)
houseH
View(houseH)
View(houseH)
View(houseH)
View(houseH)
View(houseH)
View(houseH)
View(houseH)
View(houseH)
dd
df$province <- as_factor(df$province)
df
unique(df$district)
df$district <- as_factor(df$district)
df
unique(df$locality)
df$locality <- as_factor(df$locality)
unique(df$mosquito_net_yes)
df$mosquito_net_yes <- as_factor(df$mosquito_net_yes)
unique(df$child_under_5years_net_yes)
df$child_under_5years_net_yes <- as_factor(df$child_under_5years_net_yes)
unique(df$socio-economic_status)
unique(df$'socio-economic_status')
df$socio-economic_status <- as_factor(df$socio-economic_status)
df$'socio-economic_status' <- as_factor(df$'socio-economic_status')
unique(df$HH_members_ages)
git add .
installed.packages("tinttext")
install.packages()
