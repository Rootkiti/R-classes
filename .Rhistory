head(y, 10)
tail(y, 10)
tail <- tail(y, 5)
edit(tail)
edit(tail)
a<- 2
le(a)
edit(tail)
a<- 2
length(a)
rep(c(0,1),10)
rep(c(0:1),each=10)
rep(c(0:1),each=10)
rep(c(0:1), c(10,10))
rep(c(0:1),each=10)
rep(c(0:1), c(10,5))
rep(c(0:1),each=10)
rep(c(0:1), c(10,10))
?sample
sample(0:1, size=100, replace=TRUE, prob = c(1/3, 1-1/3)) -> y
y;y==0
sample(0:1, size=100, replace=TRUE, prob = c(1/3, 1-1/3)) -> y
y
sample(0:1, size=100, replace=TRUE, prob = c(1/3, 1-1/3)) -> y
y
set.seed(42)
sample(0:1, size=100, replace=TRUE, prob = c(1/3, 1-1/3)) -> y
y
set.seed(42)
sample(0:1, size=100, replace=TRUE, prob = c(1/3, 1-1/3)) -> y
y
set.seed(42)
sample(0:1, size=100, replace=TRUE, prob = c(1/3, 1-1/3)) -> y
y
set.seed(42)
sample(0:1, size=100, replace=TRUE, prob = c(1/3, 1-1/3)) -> y
y ==0
set.seed(42)
sample(0:1, size=100, replace=TRUE, prob = c(1/3, 1-1/3)) -> y
y
set.seed(42)
sample(0:1, size=100, replace=TRUE, prob = c(1/3, 1-1/3)) -> y
unique(y ==0)
set.seed(42)
sample(0:1, size=100, replace=TRUE, prob = c(1/3, 1-1/3)) -> y
count(y ==0)
set.seed(42)
sample(0:1, size=100, replace=TRUE, prob = c(1/3, 1-1/3)) -> y
counts(y ==0)
set.seed(42)
sample(0:1, size=100, replace=TRUE, prob = c(1/3, 1-1/3)) -> y
nunique(y ==0)
set.seed(42)
sample(0:1, size=100, replace=TRUE, prob = c(1/3, 1-1/3)) -> y
y ==0
set.seed(42)
sample(0:1, size=100, replace=TRUE, prob = c(1/3, 1-1/3)) -> y
sum(y ==0)
table(y)
set.seed(42)
sample(0:1, size=100, replace=TRUE, prob = c(1/3, 1-1/3)) -> y
sum(y ==0)
table(y)
t<- table(y)
t
prop.table(t)
set.seed(123)
sample(0:1, size=200, replace=TRUE, prob = c(1/3, 1-1/3)) -> y
sum(y ==0)
t<- table(y)
t
prop.table(t)
sum(y == 0)
mean(y == 0)
sample(6,size=1)
knitr::opts_chunk$set(echo = FALSE)
# list
list1 <- list(1,2,3,4,5)
list2 <- list(6,7,8,9,10)
# list operations
# converting list to vector `unlist()`
v1 <- unlist(list1)
v1
# combining lists
combined_list <- c(list1, list2)
combined_list
# removing an element from a list
combined_list[10] <- NULL
length(combined_list)
list1[6]
# Vectors
vector1 <- c(1,2,3,4,5)
vector2 <- c(6,7,8,9,10)
# vector operations
vector1 + vector2  # addition of two vectors
vector1 - vector2 # vector subtraction
vector1 * vector2 # vector multiplication
vector1 / vector2 # vector divisio
# vector with scala operation
vector1 * 2 # vector scala multiplication
vector1 / 2 # vector1 scala division
vector1 + 2 # vector1 scala addition
# vector to list
l1 = list(vector1)
typeof(l1)
typeof(vector1)
vectors = c(vector1, vector2)
vectors
# ediiting an element in vector
vectors[9] <- 900
vector1[6]
matrix(rep(0, 5*6), nrows=5)
matrix(rep(0, 5*6), nrow=5)
matrix(rep(0, 5*6), nrow=5, byrow=T)
matrix(rep(0, 5*6), nrow=5, byrow=F)
$$
elements <- c(1, 0, 0, 1,
0, 1, 1, 1,
0, 0, 1, 1)
# Create a 3x4 matrix
my_matrix <- matrix(elements, nrow = 3, ncol = 4, byrow = TRUE)
# Print the matrix
print(my_matrix)
knitr::opts_chunk$set(echo = FALSE)
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species)
lines(0:10, lty = 2, lwd = 2)
?plot
?plot
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species, le)
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species)
lines(0:10, lty = 2, lwd = 2)
legend("topleft", legend = iris$Species)
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species)
lines(0:10, lty = 2, lwd = 2)
legend("topleft", legend = unique(iris$Species))
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species)
lines(0:10, lty = 2, lwd = 2)
legend("topleft", legend = unique(iris$Species), pch = 16)
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species)
lines(0:10, lty = 2, lwd = 2)
legend("topleft", legend = unique(iris$Species), pch = 16, col= unique(iris$Species))
?legend
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species)
lines(0:10, lty = 2, lwd = 2)
legend("topleft", legend = unique(iris$Species), pch = 16, col= unique(iris$Species), bty="n")
?legend
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species)
lines( lty = 2, lwd = 2, density(0:10))
legend("topleft", legend = unique(iris$Species), pch = 16, col= unique(iris$Species), bty="n")
?legend
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species, probability = T)
lines( lty = 2, lwd = 2, density(0:10))
legend("topleft", legend = unique(iris$Species), pch = 16, col= unique(iris$Species), bty="n")
?legend
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species, probability = T)
lines( lty = 2, lwd = 2, 0:10)
legend("topleft", legend = unique(iris$Species), pch = 16, col= unique(iris$Species), bty="n")
?legend
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species, probability = T)
abline(a = 0, b = 1, col = "purple", lwd = 2)
legend("topleft", legend = unique(iris$Species), pch = 16, col= unique(iris$Species), bty="n")
?legend
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species, probability = T)
lines( lty = 2, lwd = 2, 0:10)
legend("topleft", legend = unique(iris$Species), pch = 16, col= unique(iris$Species), bty="n")
?legend
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species, probability = T)
lines( lty = 2, lwd = 2, 0:7)
legend("topleft", legend = unique(iris$Species), pch = 16, col= unique(iris$Species), bty="n")
?legend
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species, probability = T)
lines( lty = 2, lwd = 2, 0:7)
legend("topleft", legend = unique(iris$Species), pch = 16, col= unique(iris$Species), bty="n")
?legend
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species, probability = T)
lines( lty = 2, lwd = 2, 0:7)
legend("topleft", legend = unique(iris$Species), pch = 16, col= unique(iris$Species), bty="n")
reg_model <- lm(Petal.Width ~ Petal.Length, data = iris)
# Add the regression line to the plot
abline(reg_model, col = "blue", lwd = 2)
?legend
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species, probability = T)
lines( lty = 2, lwd = 2, 0:7)
legend("topleft", legend = unique(iris$Species), pch = 16, col= unique(iris$Species), bty="n")
reg_model <- lm(Petal.Width ~ Petal.Length, data = iris)
# Add the regression line to the plot
lines(reg_model, col = "blue", lwd = 2)
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species, probability = T)
lines( lty = 2, lwd = 2, 0:7)
legend("topleft", legend = unique(iris$Species), pch = 16, col= unique(iris$Species), bty="n")
reg_model <- lm(Petal.Width ~ Petal.Length, data = iris)
# Add the regression line to the plot
ablines(reg_model, col = "blue", lwd = 2)
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species, probability = T)
lines( lty = 2, lwd = 2, 0:7)
legend("topleft", legend = unique(iris$Species), pch = 16, col= unique(iris$Species), bty="n")
reg_model <- lm(Petal.Width ~ Petal.Length, data = iris)
# Add the regression line to the plot
ablines(reg_model, col = "blue", lwd = 2)
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species, probability = T)
lines( lty = 2, lwd = 2, 0:7)
legend("topleft", legend = unique(iris$Species), pch = 16, col= unique(iris$Species), bty="n")
reg_model <- lm(Petal.Width ~ Petal.Length, data = iris)
# Add the regression line to the plot
abline(reg_model, col = "blue", lwd = 2)
?legend
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species, probability = T)
lines( lty = 2, lwd = 2, 0:7)
legend("topleft", legend = unique(iris$Species), pch = 16, col= unique(iris$Species), bty="n")
#let add a regression line to that fits the data
reg_model <- lm(Petal.Width ~ Petal.Length, data = iris)
# Add the regression line to the plot
abline(reg_model, col = "blue", lwd = 2, lty=2)
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species, probability = T)
#lines( lty = 2, lwd = 2, 0:7)
legend("topleft", legend = unique(iris$Species), pch = 16, col= unique(iris$Species), bty="n")
#let add a regression line to that fits the data
reg_model <- lm(Petal.Width ~ Petal.Length, data = iris)
# Add the regression line to the plot
abline(reg_model, col = "blue", lwd = 2, lty=2)
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species, probability = T)
#lines( lty = 2, lwd = 2, 0:7)
legend("topleft", legend = unique(iris$Species), pch = 16, col= unique(iris$Species), bty="n")
#let add a regression line to that fits the data
reg_model <- lm(Petal.Width ~ Petal.Length, data = iris)
# Add the regression line to the plot
abline(reg_model, col = "blue", lwd = 2, lty=2)
par(mfrow = c(1, 2))
hist(iris$Sepal.Length, probability = T)
lines(density(iris$Sepal.Length), col="red", lwd=1.5)
plot(iris$Petal.Length,iris$Petal.Width, pch=16, col=iris$Species, probability = T, xlab = "Petal Length", ylab = "Petal Width")
#lines( lty = 2, lwd = 2, 0:7)
legend("topleft", legend = unique(iris$Species), pch = 16, col= unique(iris$Species), bty="n")
#let add a regression line to that fits the data
reg_model <- lm(Petal.Width ~ Petal.Length, data = iris)
# Add the regression line to the plot
abline(reg_model, col = "blue", lwd = 2, lty=2)
set.seed(42)
x<- runif(1000) # this provides 1000 random numbers
hist(x)
hist(
x, probability = T, main = "Histogram of a uniform distribution", col = 'lightskyblue'
)
#adding a linr on histogram as an overlay
lines(density(x), lwd=2, lty=2)
#1 type of variance
(meanx <- mean(x))
#1 type of variance
(meanx <- mean(x))
(variance1 <- var(x))
#1 type of variance
(meanx <- mean(x))
(variance1 <- var(x))
(variance2 <- mean(X^2) - meanx^2)
#1 type of variance
(meanx <- mean(x))
(variance1 <- var(x))
(variance2 <- mean(x^2) - meanx^2)
(sdx <- sd(x))
qqplot(x)
qqplot(x, col='black)
qqplot(x, col='black')
qqplot(y=x, col='black')
(sdx <- sd(x))
#coefficient of
(sdx/meanx)
qqnorm(x, col='black')
ks.test(x)
ks.test(x,"pnorm")
qqnorm(x, col='black')
ks.test(x,"pnorm")
qqnorm(x, col='black')
qqline(x)
ks.test(x,"pnorm")
qqnorm(x, col='black')
qqline(x, lwd=3)
ks.test(x,"pnorm")
qqnorm(x, col='black')
qqline(x, lwd=2, col='lightskyblue')
rbinom_dist <- rbinom(10000, 10, 0.5)
hist(rbinom_dist, probability = TRUE, main = "Histogram of binomial distribution",
col = "turquoise", breaks = 20, xlab = NULL)
lines(density(rbinom_dist), col = "red", lwd = 2, lty = 2)
abline(v = mean(rbinom_dist), col = "blue", lty = 2, lwd = 2) # vertical line
legend("topleft", lty = c(2, 2),
col = c("red", "blue"), legend = c("Density", "Average"))
rbinom_dist <- rbinom(10000, 2, 0.5)
hist(rbinom_dist, probability = TRUE, main = "Histogram of binomial distribution",
col = "turquoise", breaks = 20, xlab = NULL)
lines(density(rbinom_dist), col = "red", lwd = 2, lty = 2)
abline(v = mean(rbinom_dist), col = "blue", lty = 2, lwd = 2) # vertical line
legend("topleft", lty = c(2, 2),
col = c("red", "blue"), legend = c("Density", "Average"))
pie(table(rbinom_dist))
rbinom_dist <- rbinom(10000, 1, 0.5)
hist(rbinom_dist, probability = TRUE, main = "Histogram of binomial distribution",
col = "turquoise", breaks = 20, xlab = NULL)
lines(density(rbinom_dist), col = "red", lwd = 2, lty = 2)
abline(v = mean(rbinom_dist), col = "blue", lty = 2, lwd = 2) # vertical line
legend("topleft", lty = c(2, 2),
col = c("red", "blue"), legend = c("Density", "Average"))
pie(table(rbinom_dist))
rbinom_dist <- rbinom(10000, 1, 0.7)
hist(rbinom_dist, probability = TRUE, main = "Histogram of binomial distribution",
col = "turquoise", breaks = 20, xlab = NULL)
lines(density(rbinom_dist), col = "red", lwd = 2, lty = 2)
abline(v = mean(rbinom_dist), col = "blue", lty = 2, lwd = 2) # vertical line
legend("topleft", lty = c(2, 2),
col = c("red", "blue"), legend = c("Density", "Average"))
pie(table(rbinom_dist))
par(mfrw=(1,2))
par(mfrw=c(1,2))
pie(table(rbinom_dist))
par(mfrw=c(1,2))
pie(table(rbinom_dist))
barplot(table(rbinom_dist))
par(mfrow=c(1,2))
pie(table(rbinom_dist))
barplot(table(rbinom_dist))
rbinom_dist <- rbinom(10000, 1, 0.6)
hist(rbinom_dist, probability = TRUE, main = "Histogram of binomial distribution",
col = "turquoise", breaks = 20, xlab = NULL)
lines(density(rbinom_dist), col = "red", lwd = 2, lty = 2)
abline(v = mean(rbinom_dist), col = "blue", lty = 2, lwd = 2) # vertical line
legend("topleft", lty = c(2, 2),
col = c("red", "blue"), legend = c("Density", "Average"))
par(mfrow=c(1,2))
pie(table(rbinom_dist))
barplot(table(rbinom_dist))
set.seed(13092024)
gauss_dist <- rnorm(1000, mean = 0, sd = 1)
hist(gauss_dist, probability = TRUE, breaks = 30, xlab = NULL,
main = "Histogram of standard normal\ndistribution", col = "turquoise")
lines(density(gauss_dist), col = "red", lwd = 2, lty = 2)
abline(v = mean(gauss_dist), col = "blue", lty = 2, lwd = 2)
legend("topleft", lty = c(2, 2),
col = c("red", "blue"), legend = c("Density", "Average"))
(mean(gauss_dist))
(mean(gauss_dist))
(sd(gauss_dist))
set.seed(13092024)
x <- rnorm(1000)
y <- rnorm(1000, mean = 5, sd = 1.5)
z <- 4 + 8*x + rnorm(1000) # linear dependence between x and z
LR <- lm(z ~ x)
par(mfrow = c(1, 2))
plot(x, y, main = "Scatter plot of x and y", col = "blue", pch = 16); grid()
plot(x, z, main = "Scatter plot of x and z", col = "blue", pch = 16)
abline(LR, col = "red")
set.seed(13092024)
x <- rnorm(1000)
y <- rnorm(1000, mean = 5, sd = 1.5)
z <- 4 + 8*x + rnorm(1000) # linear dependence between x and z
(df<-data.frame(x,z))
LR <- lm(z ~ x)
par(mfrow = c(1, 2))
plot(x, y, main = "Scatter plot of x and y", col = "blue", pch = 16); grid()
plot(x, z, main = "Scatter plot of x and z", col = "blue", pch = 16)
abline(LR, col = "red")
plot(LR)
par(mfrwo=c(1,4))
plot(LR)
par(mfrwo=c(4,1))
plot(LR)
plot(LR)
par(mfrow=c(2,2))
plot(LR)
#coefficients
coefficients(LR)
par(mfrow=c(2,2))
plot(LR)
LR <- lm(z ~ x)
#coefficients
coefficients(LR)
par(mfrow=c(2,2))
plot(LR)
LR <- lm(z ~ x, data=df)
#coefficients
coefficients(LR)
par(mfrow=c(2,2))
plot(LR)
LR <- lm(z ~ x, data=df)
#coefficients
coefficients(LR)
#model summary
summary(LR)
par(mfrow=c(2,2))
plot(LR)
new_data = data.frame(x=15)
predict(LR, new_data)
knitr::opts_chunk$set(echo = FALSE)
i <- 0
repeat{
print(1)
if(i == 10){
break
}
i <- i + 1
}
i <- 0
repeat{
print(1)
i <- i + 1
if(i == 10){
break
}
}
i <- 0
repeat{
print(1)
i <- i++
if(i == 10){
break
}
}
i <- 0
repeat{
print(1)
i <- i + 1
if(i == 10){
break
}
}
i <- 0
repeat{
print(i)
if(i == 10){
break
}
i <- i + 1
}
A<-mmatrix(1:4, 2,2)
A<-matrix(1:4, 2,2)
A
#lets apply sum function across the row to our matrix
apply(A, 1, sum)
(A<-matrix(1:4, 2,2))
#lets apply sum function across the row to our matrix
apply(A, 1, sum)
(A<-matrix(1:4, 2,2))
#lets apply sum function across the row to our matrix
apply(A, 1, sum)
# let apply sum across columns
apply(A, 2, sum)
(names<-c("rootkit","robert","root"))
lapply(names, toupper)
